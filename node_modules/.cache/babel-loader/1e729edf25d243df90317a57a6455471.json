{"ast":null,"code":"import Big from \"big.js\";\n\nconst operate = (numberOne, numberTwo, operation) => {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n\n  if (operation === \"+\") {\n    return one.plus(two).toString();\n  }\n\n  if (operation === \"-\") {\n    return one.minus(two).toString();\n  }\n\n  if (operation === \"x\") {\n    return one.times(two).toString();\n  }\n\n  if (operation === \"รท\") {\n    return one.div(two).toString();\n  }\n\n  if (operation === \"%\") {\n    return one.mod(two).toString();\n  }\n\n  throw Error(`Unknown operation '${operation}'`);\n};\n\nexport default operate;","map":{"version":3,"sources":["/Users/avehghasemian/Desktop/calculator/React-Macbook-Calculator/src/components/logic/operate.js"],"names":["Big","operate","numberOne","numberTwo","operation","one","two","plus","toString","minus","times","div","mod","Error"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,OAAO,GAAG,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,SAAvB,KAAqC;AACnD,QAAMC,GAAG,GAAGL,GAAG,CAACE,SAAD,CAAf;AACA,QAAMI,GAAG,GAAGN,GAAG,CAACG,SAAD,CAAf;;AAEA,MAAIC,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACE,IAAJ,CAASD,GAAT,EAAcE,QAAd,EAAP;AACD;;AACD,MAAIJ,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACI,KAAJ,CAAUH,GAAV,EAAeE,QAAf,EAAP;AACD;;AACD,MAAIJ,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACK,KAAJ,CAAUJ,GAAV,EAAeE,QAAf,EAAP;AACD;;AACD,MAAIJ,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACM,GAAJ,CAAQL,GAAR,EAAaE,QAAb,EAAP;AACD;;AACD,MAAIJ,SAAS,KAAK,GAAlB,EAAuB;AACrB,WAAOC,GAAG,CAACO,GAAJ,CAAQN,GAAR,EAAaE,QAAb,EAAP;AACD;;AACD,QAAMK,KAAK,CAAE,sBAAqBT,SAAU,GAAjC,CAAX;AACD,CApBD;;AAsBA,eAAeH,OAAf","sourcesContent":["import Big from \"big.js\";\n\nconst operate = (numberOne, numberTwo, operation) => {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  \n  if (operation === \"+\") {\n    return one.plus(two).toString();\n  }\n  if (operation === \"-\") {\n    return one.minus(two).toString();\n  }\n  if (operation === \"x\") {\n    return one.times(two).toString();\n  }\n  if (operation === \"รท\") {\n    return one.div(two).toString();\n  }\n  if (operation === \"%\") {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n\nexport default operate ;"]},"metadata":{},"sourceType":"module"}
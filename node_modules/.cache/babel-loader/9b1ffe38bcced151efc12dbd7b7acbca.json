{"ast":null,"code":"import operate from \"./operate\";\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\n\n\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    } // If there is an operation, update next\n\n\n    if (obj.operation) {\n      if (obj.next) {\n        return {\n          next: obj.next + buttonName\n        };\n      }\n\n      return {\n        next: buttonName\n      };\n    } // If there is no operation, update next and clear the value\n\n\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null\n      };\n    }\n\n    return {\n      next: buttonName,\n      total: null\n    };\n  }\n\n  if (buttonName === \".\") {\n    if (obj.next) {\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n\n      return {\n        next: `${obj.next}.`\n      };\n    }\n\n    if (obj.operation) {\n      return {\n        next: \"0.\"\n      };\n    }\n\n    if (obj.total) {\n      if (obj.total.includes(\".\")) {\n        return {};\n      }\n\n      return {\n        total: `${obj.total}.`\n      };\n    }\n\n    return {\n      total: \"0.\"\n    };\n  }\n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null\n      };\n    } // '=' with no operation, nothing to do\n\n\n    return {};\n  }\n\n  if (buttonName === \"+/-\") {\n    if (obj.next) {\n      return {\n        next: (-1 * parseFloat(obj.next)).toString()\n      };\n    }\n\n    if (obj.total) {\n      return {\n        total: (-1 * parseFloat(obj.total)).toString()\n      };\n    }\n\n    return {};\n  } // Button must be an operation\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n\n\n  if (!obj.next && !obj.total) {\n    return {};\n  } // no operation yet, but the user typed one\n  // The user hasn't typed a number yet, just save the operation\n\n\n  if (!obj.next) {\n    return {\n      operation: buttonName\n    };\n  } // User pressed an operation button and there is an existing operation\n\n\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName\n    };\n  } // save the operation and shift 'next' into 'total'\n\n\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName\n  };\n}","map":{"version":3,"sources":["/Users/avehghasemian/Desktop/calculator/React-Macbook-Calculator/src/components/logic/calculate.js"],"names":["operate","isNumber","item","match","calculate","obj","buttonName","total","next","operation","includes","parseFloat","toString"],"mappings":"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","sourcesContent":["import operate from \"./operate\";\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === \".\") {\n    if (obj.next) {\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: \"0.\" };\n    }\n    if (obj.total) {\n      if (obj.total.includes(\".\")) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: \"0.\" };\n  }\n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === \"+/-\") {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  if (!obj.next && !obj.total) {\n    return {};\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}